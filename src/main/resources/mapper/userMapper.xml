<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.openeg.openegscts.student.repository.IUserMapper">

    <insert id="signUpUser" useGeneratedKeys="true" keyProperty="userId" parameterType="com.openeg.openegscts.student.entity.Users">
        insert into user_tb(user_id, name, email, password, type, reg_date, is_oauth) values(#{userId}, #{name}, #{email}, #{password}, 1, DATE_FORMAT(SYSDATE(), '%Y/%m/%d %H:%i:%s'), 0)
    </insert>

    <insert id="signUpUserOAuth" useGeneratedKeys="true" keyProperty="userId" parameterType="com.openeg.openegscts.student.entity.Users">
        insert ignore into user_tb(user_id, name, email, type, reg_date, is_oauth) values(#{userId}, #{name}, #{email}, 1, DATE_FORMAT(SYSDATE(), '%Y/%m/%d %H:%i:%s'), 1)
    </insert>

    <select id="findByEmail" resultType="com.openeg.openegscts.student.entity.Users" parameterType="string">
        select user_id as userId,
               name,
               email,
               password,
               type,
               reg_date as regDate
        from user_tb
        where email=#{email}
    </select>

    <select id="confirmUser" resultType="com.openeg.openegscts.student.entity.Users" parameterType="string">
        select user_id as userId,
               name,
               email,
               password,
               type,
               reg_date as regDate
        from user_tb
        where email=#{email}
        and (type=1 or type=0)
    </select>

    <select id="confirmUserOauth" resultType="com.openeg.openegscts.student.entity.Users" parameterType="string">
        select user_id as userId,
               name,
               email,
               type,
               reg_date as regDate
        from user_tb
        where email=#{email}
    </select>

    <select id="getUserById" resultType="com.openeg.openegscts.student.entity.Users" parameterType="String">
        select user_id as userId,
               name,
               email,
               password,
               type,
               reg_date as regDate,
               is_oauth as isOauth
        from user_tb
        where user_id=#{userId}
    </select>

    <select id="getSolvedCode" resultType="com.openeg.openegscts.student.entity.SolvedCode" parameterType="String">
        select l.language_type as languageType,
               sec.sec_name as secName,
               s.solved_id as solvedId,
               s.scode_id as scodeId,
               s.try_num_first as tryNumFirst,
               s.try_num_second as tryNumSecond,
               s.solved_date_first as solvedDateFirst,
               s.solved_date_second as solvedDateSecond
        from language_tb l, security_tb sec, solved_code_tb s, submit_code_tb sb
        where s.user_id=#{userId}
            and s.scode_id = sb.scode_id
            and sb.language_id = l.language_id
            and sb.sec_id = sec.sec_id
        order by s.try_num_first asc
    </select>

    <select id="confirmPwd" resultType="com.openeg.openegscts.student.entity.Users" parameterType="string">
        select email
        from user_tb
        where password=#{password}
    </select>

    <update id="updateUser" parameterType="com.openeg.openegscts.student.entity.Users">
        update user_tb set name=#{name}, password=#{password} where user_id=#{userId}
    </update>
    
    <insert id="insertProject" parameterType="com.openeg.openegscts.student.entity.Users" >
        insert ignore into project_tb(project_id, user_id, project_name, project_type, project_path) values(#{projectId}, #{projectUserId}, #{projectName}, #{projectType}, #{projectPath}) 
    </insert>
     <insert id="insertSpringProject" parameterType="com.openeg.openegscts.student.entity.Users" >
        insert ignore into project_tb(project_id, user_id, project_name, project_type, project_path) values(#{projectId}, #{projectUserId}, #{projectName}, #{projectType} , #{projectPath});
        insert ignore into project_tb_spring(id, project_id, project_build_type, project_language, project_spring_boot_ver, project_meta_groupId, project_meta_artifactId, project_meta_desc, project_meta_package, project_dependencies) 
        values(#{projectSpringId}, #{projectId}, #{projectBuildType}, #{projectLanguage}, #{projectSpringBootVer}, #{projectMetaGroupId}, #{projectMetaArtifactId}, #{projectMetaDesc}, #{projectMetaPackage}, #{projectDependencies})
    </insert>
    <select id="getMyProjects" resultType="com.openeg.openegscts.student.entity.Project" parameterType="string">
        select p.project_id as projectId,
        p.user_id as userId,
        p.project_name as projectName,
        p.project_type as projectType,
        p.project_created as projectCreated,
        p.project_path as projectPath
        from project_tb p
        where user_id=#{userId}
        order by project_created asc
    </select>
     <select id="getProjectById" resultType="com.openeg.openegscts.student.entity.Project" parameterType="string">
       select p.project_id as projectId,
       p.user_id as projectUserId,
       p.project_name as projectName,
       p.project_type as projectType,
       p.project_created as projectCreated,
       p.project_path as projectPath
       from project_tb p
       where p.project_id=#{projectId}
       order by project_created asc
   </select>
    
    <insert id="insertHistoryDiagnosis"  >
        insert into project_diagnosis(project_id, user_id, path, result) values(#{projectId}, #{userId}, #{path}, #{path}) 
    </insert>
    <delete id="deleteProject" parameterType="string">
       delete from project_tb where project_id=#{projectId};
       delete from project_tb_spring where project_id=#{projectId}
    </delete>
    
    <select id="getProjectDiagnosis" resultType="com.openeg.openegscts.student.entity.ProjectDiagnosis" parameterType="string">
        select pg.project_id as projectId,
        pg.user_id as userId,
        pg.path as path,
        pg.time as time,
        pg.result as result
        from project_diagnosis as pg
        where pg.project_id=#{projectId}
    </select>
     <select id="checkProjectName" resultType="com.openeg.openegscts.student.entity.Project" parameterType="string">
        select p.project_id as projectId,
        p.user_id as projectUserId,
        p.project_name as projectName,
        p.project_type as projectType,
        p.project_created as projectCreated,
        p.project_path as projectPath
        from project_tb p
        where p.project_name=#{projectName} and p.user_id=#{userId}
    </select>
     <select id="getUserContainer" resultType="com.openeg.openegscts.student.entity.Container" parameterType="string">
        select uc.project_id as containerId,
        uc.user_id as userId,
        uc.project_id as projectId,
        uc.container_name as containerName,
        uc.vscode_port as vscodePort,
        uc.node_port as nodePort,
        uc.java_port as javaPort,
        uc.python_port as pythonPort,
        uc.state as state,
        uc.container_created as containerCreated
        from user_container as uc
        where uc.user_id=#{userId}
    </select>
     <insert id="insertContainer"  >
        insert into user_container(containerid, project_id, user_id, container_name, vscode_port, node_port, java_port, python_port, state) values(#{containerId}, #{projectId}, #{userId}, #{containerName} ,#{vscodePort},#{nodePort}, #{javaPort}, #{pythonPort}, #{state}) 
    </insert>
    <update id="stopContainer"  >
        update user_container set state = 0 where container_name = #{containerName} 
    </update>
    <update id="startContainer"  >
        update user_container set state = 1 where container_name = #{containerName} 
    </update>
    <update id="updateContainerForProjectId"  >
        update user_container set project_id = #{projectId} where container_name = #{containerName} 
    </update>
    <select id="getUserOwaspContainer" resultType="com.openeg.openegscts.student.entity.OwaspContainer" parameterType="string">
        select oc.containerid as containerId,
        oc.user_id as userId,
        oc.container_name as containerName,
        oc.container_port as containerPort,
  		oc.container_created as containerCreated
        from owasp_container as oc
        where oc.container_name=#{containerName}
    </select>
    <insert id="insertOwaspContainer"  >
        insert into owasp_container(containerid, container_port, user_id, container_name) values(#{containerId}, #{containerPort}, #{userId}, #{containerName}) 
    </insert>
</mapper>